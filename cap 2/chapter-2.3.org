#+Title: Chapter 2.3
#+BEGIN_SRC lisp
(defparameter *simple-grammar*
  '((sentence -> (noun-phrase verb-phrase))
    (noun-phrase -> (Article Noun))
    (verb-phrase ->(Verbnoun-phrase))
    (Article -> the a)
    (Noun -> man ball woman table)
    (Verb -> hit took saw liked)))

(defvar *grammar* *simple-grammar*)

(defun mappend (fn the-list)
 (if (null the-list)
      nil
      (append (funcall fn (first the-list))
      (mappend fn (rest the-list)))))

(defun random-elt (choices)
  (elt choices (random (length choices))))

(defun rule-lhs (rule)
  (first rule))

(defun rule-rhs (rule)
  (rest (rest rule)))

(defun rewrites (category)
  (rule-rhs (assoc category *grammar*)))

(defun generate-1 (phrase)
 (cond ((listp phrase)
        (mappend 'generate-1 phrase))
        ((rewrites phrase)
         (generate-1 (random-elt (rewrites phrase))))
         ( t (list phrase))))

(defun generate-2 (phrase)
 (if (listp phrase)
      (mappend 'generate-2 phrase)
      (let ((choices (rewrites phrase)))
        (if (null choices)
            (list phrase)
            (generate-2 (random-elt choices))))))

#+End_Src
